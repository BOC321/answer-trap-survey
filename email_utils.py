# In email_utils.py

import streamlit as st
from sendgrid import SendGridAPIClient
from sendgrid.helpers.mail import Mail

def format_report_as_html(survey_title, final_scores, category_map, total_score, total_score_cat_id, get_ranges_for_category):
    """
    Takes all the report data and formats it into a nice HTML string for the email body.
    """
    html_content = f"<html><body style='font-family: sans-serif;'>"
    html_content += f"<h1>{survey_title}</h1>"
    html_content += "<h2>Your Risk Profile Report</h2><hr>"

    # --- Category Breakdown ---
    html_content += "<h3>Category Breakdown</h3>"
    for cat_id, score in final_scores.items():
        ranges = get_ranges_for_category(cat_id)
        report_text = "No report text defined for this score."
        display_color = "#dddddd"
        
        for r_id, r_start, r_end, r_text, r_color in ranges:
            if r_start <= score <= r_end:
                report_text = r_text
                display_color = r_color
                break
        
        # CORRECTED a bug here: .replace('\n', '<br>') instead of ('n', '<br>')
        html_content += f"""
        <div style='border-left: 5px solid {display_color}; padding-left: 15px; margin-bottom: 20px; border-radius: 5px; background-color: #fafafa; padding: 15px;'>
            <h4>{category_map.get(cat_id, 'Unknown Category')}</h4>
            <p><b>Your Score: {score}</b></p>
            <p>{report_text.replace('\n', '<br>')}</p>
        </div>
        """

    # --- Overall Profile ---
    html_content += "<hr><h3>Overall Profile</h3>"
    if total_score_cat_id:
        total_ranges = get_ranges_for_category(total_score_cat_id)
        total_report_text = "No overall report text defined for this score."
        
        for r_id, r_start, r_end, r_text, r_color in total_ranges:
            if r_start <= total_score <= r_end:
                total_report_text = r_text
                break
        
        # CORRECTED a bug here: .replace('\n', '<br>') instead of ('n', '<br>')
        html_content += f"<p>{total_report_text.replace('\n', '<br>')}</p>"

    html_content += "<hr><p><em>This is an automated report generated by the Answer Trap Risk Profile application.</em></p>"
    html_content += "</body></html>"
    
    return html_content

def send_report_email(subject, html_content, user_email):
    """
    Sends the HTML report to the user and a copy to the admin using SendGrid.
    """
    try:
        api_key = st.secrets["SENDGRID_API_KEY"]
        sender_email = st.secrets["SENDER_EMAIL"]
        admin_email = st.secrets["ADMIN_EMAIL"]
    except KeyError as e:
        st.error(f"Missing secret: {e}. Please check your .streamlit/secrets.toml file.")
        return False

    message_to_user = Mail(
        from_email=sender_email,
        to_emails=user_email,
        subject=subject,
        html_content=html_content
    )
    admin_subject = f"Survey Submission: {subject}"
    message_to_admin = Mail(
        from_email=sender_email,
        to_emails=admin_email,
        subject=admin_subject,
        html_content=html_content
    )

    try:
        sg = SendGridAPIClient(api_key)
        response_user = sg.send(message_to_user)
        print(f"User email sent, status code: {response_user.status_code}")
        response_admin = sg.send(message_to_admin)
        print(f"Admin email sent, status code: {response_admin.status_code}")

        if response_user.status_code in [200, 202] and response_admin.status_code in [200, 202]:
            return True
        else:
            st.error("There was an issue sending the email. Please contact the administrator.")
            st.error(f"User email status: {response_user.status_code}. Admin email status: {response_admin.status_code}")
            return False
            
    except Exception as e:
        st.error("An error occurred while trying to send the email.")
        st.error(str(e))
        return False